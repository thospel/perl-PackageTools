#!/usr/bin/perl -w
# $HeadURL: http://subversion.bmsg.nl/repos/kpn/trunk/src/perl-modules/PackageTools/bin/release_pm $
# $Id: release_pm 4697 2011-08-30 11:34:50Z hospelt $
use strict;
use warnings;

our $VERSION = "1.012";

use FindBin qw($Script);
our $Bin;

# If the program runs as /foobar/bin/program, find libraries in /foobar/lib
BEGIN {
    # Even on windows FindBin uses / in the reported path
    $Bin = $FindBin::Bin;
    $Bin =~ s{/+\z}{};
    $Bin =~
        ($^O eq "MSWin32" ?
         qr{^((?:[A-Z]:)?(?:/[a-zA-Z0-9_:.~ -]+)*)/[a-zA-Z0-9_.-]+/*\z} :
         qr{^((?:/[a-zA-Z0-9_:.-]+)*)/[a-zA-Z0-9_.-]+/*\z}) ||
         die "Could not parse bin directory '$Bin'";
    # Use untainted version of lib
    require lib;
    # Support a simple --blib option for pre-install testing
    "lib"->import(@ARGV && $ARGV[0] eq "--blib" ? shift && "$1/blib/lib" : "$1/lib");
}

use Getopt::Long;
use IO::Handle;	# for (f)sync

my $quot = qr/[\'\"]?/;
my $sums = "md5-versions";
my $quick = 1;

Getopt::Long::Configure ("bundling");
my $start_digits  = 3;
my $start_version = 1;
die "Could not parse your command line. Try $Bin/$Script -h\n" unless
    GetOptions("import_revision!"	=> \my $import_revision,
               "import_version!"	=> \my $import_version,
               "digits=i"		=> \$start_digits,
               "initial:s"		=> \my $start_release,
               "start_version=s",	=> \$start_version,
               "vcs_check!"		=> \my $vcs_check,
               "next!"			=> \my $next,
	       "version!"		=> \my $print_version,
               "U|unsafe!"		=> \my $unsafe,
               "h|help!"		=> \my $help);

if ($print_version) {
    require PackageTools::Package;
    ## no critic (ProhibitUselessNoCritic RequireCheckedSyscalls)
    print <<"EOT";
release_pm $VERSION (PackageTools $PackageTools::Package::VERSION)
EOT
    exit 0;
}
if ($help) {
    require Config;
    $ENV{PATH} .= ":" unless $ENV{PATH} eq "";
    $ENV{PATH} = "$ENV{PATH}$Config::Config{'installscript'}";
    exec("perldoc", "-F", $unsafe ? "-U" : (), "$Bin/$Script") || exit 1;
    # make parser happy
    %Config::Config = ();
}
die "Meaningless arguments\n" if @ARGV;
die "Cannot have both import-revision and import-version" if
    $import_revision && $import_version;

package PackageTools::Release;
use Carp;
use Digest::MD5 qw(md5_hex);
use Errno qw(ENOENT ESTALE);
use Time::Local qw(timegm);
use FindBin qw($Script);

use constant MTIME	=> 9;	# where to find mtime in stat

my $epoch_base = timegm(0,0,0,1,0,70);	## no critic (ProhibitUselessNoCritic ProhibitMagicNumbers)

# Todo: For the next incompatible change, replace $package by $module
# Maybe also add support for for looking up files --Ton
# Use |= instead of = for the POD keywords so that selfdocumentation of
# release_pm doesn't improperly pick up the Package POD
our $history = <<'EOT'
use Carp;

my $epoch_base;

sub release_time {
    if (!defined $epoch_base) {
        require Time::Local;
        $epoch_base = Time::Local::timegm(0,0,0,1,0,70);	## no critic (ProhibitUselessNoCritic ProhibitMagicNumbers)
    }
    return $release_time + $epoch_base;
}

sub released {
    my ($package, $version) = @_;
    my $p = $package;
    $p =~ s{::}{/}g;
    my $history = $history{"lib/$p.pm"} ||
        croak "Could not find a history for package '$package'";
    my $lowest = 9**9**9;
    for my $v (keys %$history) {
        $lowest = $v if $v >= $version && $v < $lowest;
    }
    croak "No known version '$version' of package '$package'" if
        $lowest == 9**9**9;
    return $history->{$lowest};
}
1;
__END__

|=for stopwords PACKAGE globals

|=head1 NAME

PACKAGE::Package - Version and history of PACKAGE

|=head1 SYNOPSIS

  use PACKAGE::Package;

  $epoch_time = PACKAGE::Package->release_time();

  $package_version = PACKAGE::Package->VERSION;

  $min_package_version = PACKAGE::Package::released($module, $module_version);

|=head1 DESCRIPTION

In the context of this documentation a C<package> is a set of files that
together make up a perl extension, not to be confused with the more normal
perl concept of a namespace for globals.

A package release with a certain package version number contains a number of
modules and other files with their own version numbers. This module contains a
history of which files with which versions where in which package release and
also knows when the current package was released.

This module contains a few simple methods to query this.

The version number of this Package.pm module is always equal to the version
number of the package release. This means you can use this to query this
release number and also makes it a convenient target for Makefile.PL
dependencies.

|=head1 METHODS

|=over

|=item X<release_time>$epoch_time = PACKAGE::Package->release_time()

Returns the the number of non-leap seconds since whatever time the system that
calls this function considers to be the epoch the last time
L<release_pm|release_pm(1)> was run (even if that was on another system with a
different epoch). Since the idea is to run L<release_pm|release_pm(1)> just
before releasing the package this is therefore the value of
L<time()|perlfunc/time> on the system calling this function at the moment the
package was released. This number is suitable for feeding to
L<gmtime()|perlfunc/gmtime> and L<local_time()|perlfunc/local_time>

|=item X<VERSION>$package_version = PACKAGE::Package->VERSION

This is the normal L<UNIVERSAL::VERSION|UNIVERSAL/VERSION> method you can use
on all modules, but this particular module is guaranteed to have a version
number that is the same as that of the package

|=item X<released>$min_package_version = PACKAGE::Package::released($module, $module_version)

Given a module name (e.g. Foo::Bar) and a module version number (e.g. 1.023)
returns the lowest package version in which that module (as the file
F<Foo/Bar.pm>) had at least that module version

|=back

|=head1 EXPORTS

None.

|=head1 SEE ALSO

L<release_pm|release_pm(1)> which can be used to keep Package.pm files up to
date.

|=cut

EOT
    ;
$history =~ s/^\|=/=/mg;

# Import a complete file and return the contents as a single string
sub slurp {
    my ($file, $may_not_exist) = @_;
    croak "filename is undefined" if !defined $file;
    open(my $fh, "<", $file) or
        $may_not_exist && ($! == ENOENT || $! == ESTALE) ?
	return undef : croak "Could not open '$file': $!";
    my $binary = -B $file;
    binmode $fh if $binary;
    my $rc = read($fh, my $slurp, 1024 + -s $fh);
    croak "File '$file' is still growing" if
        $rc &&= read($fh, $slurp, 1024, length $slurp);
    croak "Error reading from '$file': $!" if !defined $rc;
    close($fh) || croak "Error while closing '$file': $!";
    return $binary, $slurp;
}

sub spew($$;$) {
    my $file = $_[0];
    croak "filename is undefined" if !defined $file;
    croak "We shouldn't be trying to update binary file '$file'" if -s $file && -B _;
    open(my $fh, ">", $file) || croak "Could not create '$file': $!";
    binmode $fh if $_[2];
    eval {
        print($fh $_[1]) || croak "Error writing to '$file': $!";
        $fh->flush	|| croak "Error flushing '$file': $!";
        $^O eq "MSWin32" || $fh->sync || croak "Error syncing '$file': $!";
        close($fh)	|| croak "Error closing '$file': $!";
    };
    if ($@) {
        undef $fh;
        unlink($file) || die "Could not unlink '$file' after $@";
        die $@;
    }
}

sub get_versions_file {
    my ($class) = @_;
    my (%file_props, %released, $release, $begun, $ended, $digits, $date, $vcs);
    my @stat;
    # !$quick or @stat = stat($sums) or die "Could not stat '$sums': $!";
    my $content = slurp($sums, 1);
    if (defined $content) {
        my $md5_versions_content = $content;
        my $line_nr;
        while ($md5_versions_content =~ s/^([^\n]*.)//s) {
            $line_nr++;
            my $line = $+;
            $line =~ s/\s+\z//;
            $line =~ s/^\s+//;
            next if $line eq "" || $line =~ /^\#/;
            if (!$begun) {
                if ($line eq "BEGIN") {
                    $begun = 1;
                    next;
                }
                croak "Unexpected data before BEGIN at line $line_nr in file $sums";
            }
            croak "Unexpected data after END at line $line_nr in file $sums" if
                $ended;
            if ($line =~ /^VERSION\s+([a-fA-F0-9]{32})\s+([0-9]+(?:\.[0-9]+)?)\s+(\S+)\z/) {
                croak "Duplicate VERSION entry for file $3\n" if
                    exists $file_props{$3};
                $file_props{$3} = {
                    old_chksum	=> $1,
                    version	=> $2,
                    file	=> $3,
                };
            } elsif ($line =~ /^RELEASED\s+([0-9]+(?:\.[0-9]+)?)\s+([0-9]+(?:\.[0-9]+)?)\s+(\S+)\z/) {
                croak "Duplicate RELEASED entry for file $3 version $1\n" if
                    exists $released{$3}{$1};
                $released{$3}{$1} = $2;
            } elsif ($line =~ /^RELEASE\s+([0-9]+(?:\.[0-9]+)?)\z/) {
                croak "Duplicate RELEASE\n" if defined $release;
                $release = $1;
            } elsif ($line =~ /^DIGITS\s+([0-9]+)\z/) {
                croak "Duplicate DIGITS\n" if defined $digits;
                $digits = $1;
            } elsif ($line =~ /^VCS_CHECK\s+([01])\z/) {
                croak "Duplicate VCS_CHECK\n" if defined $vcs;
                $vcs = $1;
            } elsif ($line =~ /^SEMANTICS\s+([0-9]+\.[0-9]+)\z/) {
                no warnings 'once';
                croak "File $sums needs at least $Script version $1, but this is version $VERSION" if $1 > $VERSION;
            } elsif ($line =~ /^DATE\s+([0-9]{4})-([0-9]{2})-([0-9]{2})\s+([0-9]{2}):([0-9]{2}):([0-9]{2})\z/) {
                croak "Duplicate DATE\n" if defined $date;
                croak "Your name isn't Lovelace" if $1 < 1900;
                croak "Newyear in december" if $2 < 1;
                $date = timegm($6, $5, $4, $3, $2-1, $1-1900);
            } elsif ($line eq "END") {
                $ended = 1;
            } else {
                croak "Could not parse line $line_nr in file $sums: '$line'";
            }
        }
    } else {
        $content = "";
    }

    $digits = $start_digits if !defined $digits;
    my $format = sprintf("%%.%df", $digits);
    if (!defined $release) {
        # croak "No RELEASE\n" if $content ne "";
        $start_release ||= 1;
        $release = sprintf($format, $start_release);
    }
    my $release_props = bless {
        modified	=> $stat[MTIME],
        step		=> 1/10**$digits,
        "format"	=> $format,
        start_version	=> sprintf($format, $start_version),
        digits		=> $digits,
        release		=> $release,
        release_changed	=> !$next,
        any_changes	=> 0,
        old_content	=> $content,
        old_file_props	=> \%file_props,
        released	=> \%released,
        time_stamp	=> $date,
        vcs_check	=>
            defined $vcs_check ? $vcs_check :
            defined $vcs       ? $vcs       :
            1,
    }, $class;
    $release_props->next_release if $next;
    return $release_props;
}

sub next_version {
    my ($release_props, $version, $steps) = @_;
    Carp::confess "Assertion: No version" if !defined $version;
    $steps = 1 if !defined $steps;
    return sprintf($release_props->{format},
                   $version + $steps * $release_props->{step});
}

sub next_release {
    my ($release_props) = @_;
    if (!$release_props->{release_changed}) {
        $release_props->{release} = $release_props->next_version($release_props->{release});
        $release_props->{release_changed} = 1;
        warn "Release $release_props->{release}\n";
    }
    $release_props->{any_changes} ||= 1;
}

sub chksum {
    my ($file_props) = @_;
    # Get rid of typical CVS/Subversion junk
    my $content = $file_props->{content};
    $content =~ s/\$(Revision|LastChangedRevision|Rev|Date|LastChangedDate|Author|LastChangedBy|Id|HeadURL|URL|Header|Name|Locker|Log|RCSfile|Source|State):[^\n\$]+?[^\S\n]\$/\$$1: \$/g;
    return md5_hex($content);
}

sub get_MANIFEST {
    my $manifest = slurp("MANIFEST");
    if ($manifest !~ s/^\s*\Q$sums\E\s*\n//m) {
        croak "$sums is not in MANIFEST\n" if !defined $start_release;
        warn "Creating empty $sums\n";
        spew($sums, "");
        warn "Adding $sums to MANIFEST\n";
        spew("MANIFEST", "$manifest$sums\n");
    }
    # META.yml is often generated during the make dist so it's often absent
    # and even if it isn't versioning typically happens too late
    $manifest =~ s/^\s*META\.yml(?:[^\S\n]+.*|[^\S\n]*)\n//m;
    my @files = $manifest =~ /^\s*(\S+)/mg;
    my %seen;
    my $error;
    for my $file (@files) {
        $error .= "Duplicate in MANIFEST: $file\n" if $seen{lc $file}++;
    }
    die $error if $error;
    return @files;
}

sub get_files {
    my ($release_props) = @_;

    my $released = $release_props->{released};
    $release_props->{file_props} = \my %file_props;
    my @files = get_MANIFEST();
    $release_props->{files} = \@files;
    for my $file (@files) {
        my $file_props = delete $release_props->{old_file_props}{$file};
        if ($file_props) {
            $released->{$file}{$file_props->{version}} ||= do {
                warn "Fixup missing RELEASED for $file\n";
                $release_props->{release};
            };
            $file_props->{version_changed} = !$next && $released->{$file}{$file_props->{version}} eq $release_props->{release};
        } else {
            $file_props = {
                version	=> $release_props->{start_version},
                version_changed => 1,
                file	=> $file,
            };
            $release_props->next_release;
            warn "New $file\n";
        }
        my $do_vcs_check;
        if ($file =~ m{\bPackage\.pm\z}) {
            ($file_props->{binary}, $file_props->{content}) = slurp($file, 1);
            if (defined $file_props->{content} &&
                $file_props->{content} ne "") {
                $do_vcs_check = $release_props->{vcs_check};
            } else {
                my $package_name = $file;
                $package_name =~ s{^lib/}{} || die "No lib/ in '$package_name'";
                $package_name =~ s{\.pm\z}{};
                $package_name =~ s{/}{::}g;
                warn "Generating initial content for $file\n";
                $file_props->{content} = <<"EOT";
package $package_name;
# \$HeadURL: xxx/$file \$
# \$Id: xxx \$

# START HISTORY
# END HISTORY
EOT
    ;
            }
        } else {
            ($file_props->{binary}, $file_props->{content}) = slurp($file);
            $do_vcs_check = $release_props->{vcs_check};
        }
        if ($do_vcs_check) {
            for my $url ($file_props->{content} =~ /\$HeadURL[^\S\n]*:[^\S\n]*(\S.*?)[^\S\n]+\$/g) {
                next if $url =~ m{/\Q$file\E\z};
                warn("Warning: $file has inconsistent \$HeadURL $url \$\n");
                last;
            }
            for my $id ($file_props->{content} =~ /\$Id[^\S\n]*:[^\S\n]*(\S.*?)(?:,v)?[^\S\n].*?[^\S\n]+\$/g) {
                next if $file eq $id || $file =~ m{/\Q$id\E\z};
                warn("Warning: $file has inconsistent \$Id $id\n");
                last;
            }
        }
        $file_props->{content_chksum} = $file_props->{disk_chksum} =
            chksum($file_props);
        if ($import_revision &&
            $file_props->{content} =~ /\$Revision\s*:[^\S\n]*([0-9]+)\.([0-9]+)\S*[^\S\n]+\$/) {
            $file_props->{version} = $release_props->next_version($1, $2);
            $file_props->{version_changed} = 1;
            $release_props->next_release;
        }
        if ($import_version &&
            $file_props->{content} =~
            /^\s*(?:(?:my|our|BEGIN\s*\{)\s*)?\$VERSION\s*=
                       \s*(?:($quot)([0-9._]+)\1	|
                             qq?\{([0-9._]+)\})\s*[;\}]	|
                    \$Version:\s*([0-9.]+)\s*\$/mx) {
            $file_props->{version} = $release_props->next_version($+, 0);
            $file_props->{version_changed} = 1;
            $release_props->next_release;
        }
        $release_props->{released}{$file}{$file_props->{version}} ||= $release_props->{release} if $file_props->{version_changed} && $file ne $sums;
        $file_props{$file} = $file_props;
    }
    if (%{$release_props->{old_file_props}}) {
        $release_props->next_release;
        for my $file (keys %{$release_props->{old_file_props}}) {
            warn "Forgetting $file\n";
        }
    }
    $release_props->{now} = time;
    $release_props->{time_stamp} ||= $release_props->{now};
}

sub release {
    my ($release_props) = @_;
    my $file_props = $release_props->{file_props};
    my $changes;
    do {
        $changes = 0;
        $release_props->{time_stamp} = $release_props->{now} if
            $release_props->{any_changes};
        for my $file (@{$release_props->{files}}) {
            my $file_props = $file_props->{$file} ||
                die "Assertion: Unknown file $file";
            if (!$file_props->{binary} && $file !~ /\.(?:diff|patch)\z/i) {
                $file_props->{content} =~ s{[^\S\n]+\n}{\n}g;
                $file_props->{content} =~ s{(?:^\n)+\z}{}m;
            }
            if ($file eq "README") {
                $file_props->{content} =~ s/^(.* version )(.*)\n/$1$release_props->{release}\n/i;
                $file_props->{content} =~ s/^(.*)\n=+\n/"$1\n" . "=" x length($1) . "\n"/ie;
            } elsif ($file eq "Changes") {
                if ($release_props->{any_changes}) {
                    my ($sec, $min, $hour, $mday, $mon, $year) =
                        gmtime($release_props->{time_stamp});
                    my $now = sprintf("%04d-%02d-%02d %02d:%02d:%02d UT",
                                      $year+1900, $mon+1, $mday,
                                      $hour, $min, $sec);
                    $file_props->{content} =~ s/^(Revision history for .*\s*\n|)([0-9.]+)([^\S\n]*.*)/$1 . ($2 eq $release_props->{release} ? "$2\t$now" : "$release_props->{release}\t$now\n\n$2$3")/ie;
                }
            } elsif ($file eq "Package.pm" ||
                     $file =~ m{/Package\.pm\z} &&
                     $file !~ m{^t/} && $file !~ m{/t/}) {
                no warnings "once";
                require Data::Dumper;
                local $Data::Dumper::Indent = 1;
                local $Data::Dumper::Sortkeys = 1;
                my $time_stamp = $release_props->{time_stamp} - $epoch_base;
                my $package_name = $file;
                $package_name =~ s{^lib/}{} || die "No lib/ in '$package_name'";
                $package_name =~ s{/*Package\.pm\z}{};
                $package_name =~ s{/}{::}g;
                my $his = $history;
                $his =~ s/PACKAGE/$package_name/g;
                my $released_string =
                    Data::Dumper::Dumper($release_props->{released});
                $released_string =~ s/^\s*\$VAR1\s*=\s*{(.*)}\s*;\s*\z/use strict;\nuse warnings;\nuse vars qw(\$VERSION \$release_time %history);\n\$VERSION = "$release_props->{release}";\n\$release_time = $time_stamp;\t## no critic (ProhibitUselessNoCritic ProhibitMagicNumbers)\n%history = ($1);\n\n$his/s || die "Assertion: Unexpected Dumper output";
                $file_props->{content} =~ s/^[^\S\n]*\#\s*START\s+HISTORY\s*\n(.*?)^\s*\#\s*END\s+HISTORY[^\S\n]*\n/\# START HISTORY\n# autogenerated by $Script\n$released_string\# END HISTORY\n/sm;
                $file_props->{version_changed} = 1;
                $file_props->{version} = $release_props->{release};
            } elsif ($file =~ m{(?:^|/)t/(.*\.t)\z}) {
                my $name = $1;
                $file_props->{content} =~ s{^((?:\#.*\n)*\#.*it should work as )[`']perl\s+((?:-T\s+|)(?:t/|)).*[`']\s*\n}{$1`perl $2$name'\n};
            } elsif ($file =~ m{(.*/)MANIFEST\z}s) {
                my $sub_match = qr{^\Q$1\E(.*)}s;
                $file_props->{content} = "";
                for my $file (@{$release_props->{files}}) {
                    $file_props->{content} .= "$1\n" if $file =~ $sub_match;
                }
            } elsif ($file eq "Makefile.PL" || $file =~ m{/Makefile\.PL\z}) {
                my $my_section = "";
                my $my_any_to_blib = "";
                if ($file eq "Makefile.PL") {
                    # We should check the dependencies and then set the makeppd
                    # min_version based on that
                    $my_section .= << 'POSTAMBLES';

    $postamble{ppm} = <<'EOT';
ppm: $(DISTNAME).ppd
	makeppd.pl "--perl=$(PERLRUN)" --min_version=1.016 "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --leave=ppm "--objects=$(OBJECT)" $(DISTNAME).ppd $(VERSION)
EOT

    $postamble{ppm3} = <<'EOT';
ppm3: $(DISTNAME).ppd
	makeppd.pl "--perl=$(PERLRUN)" --min_version=1.016 "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --ppm_version=3 --leave=ppm3 "--objects=$(OBJECT)" $(DISTNAME).ppd $(VERSION)
EOT

    $postamble{ppm4} = <<'EOT';
ppm4: $(DISTNAME).ppd
	makeppd.pl "--perl=$(PERLRUN)" --min_version=1.016 "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --ppm_version=4 --leave=ppm4 "--objects=$(OBJECT)" $(DISTNAME).ppd $(VERSION)
EOT

    $postamble{ppd} = <<'EOT';
$(DISTNAME).ppd: all ppd
EOT

    $postamble{cover} = <<'EOT';
cover:
	cover -delete
	mkdir cover_db
	-HARNESS_PERL_SWITCHES=-MDevel::Cover make test
	cover
EOT

    $postamble{critic} = <<'EOT';
critic:
	perlcritic .
EOT

    $postamble{ppm_install} = <<'EOT';
ppm_install: ppm
	ppm install ppm/$(DISTNAME).ppd
EOT

    $postamble{ppm_uninstall} = <<'EOT';
ppm_uninstall:
	ppm uninstall $(DISTNAME)
EOT
POSTAMBLES
    ;
                    $my_any_to_blib .= <<'MY_ANY_TO_BLIB';
BEGIN {
    package MY;
    my $min_any_to_blib_version = "1.000";
    my ($any_to_blib, $error);

    for my $path (split $^O eq "MSWin32" ? qr{;} : qr{:}, $ENV{PATH}) {
        if ($^O eq "MSWin32" ? -f "$path/any_to_blib" : -x "$path/any_to_blib") {
            defined(my $pid =
                    open(my $fh, "-|",
                         $^O eq "MSWin32" ? qq("$^X" "$path/any_to_blib" --version):
                         ($^X, "$path/any_to_blib", "--version"))) ||
                         die "Could not fork: $!";
            my $version_string = do { local $/; <$fh> };
            close($fh);	## no critic (ProhibitUselessNoCritic RequireCheckedClose)
            die "Unexpected exit code $? while closing '$^X $path/any_to_blib --version'" if $?;
            my ($version) = $version_string =~ /^any_to_blib\s+(\d+\.\d+)\s/m or
                die "$path/any_to_blib --version: Could not parse version_string\n$version_string";
            if ($version < $min_any_to_blib_version) {
                $error .= "$path/any_to_blib is version '$version' but I need at least version '$min_any_to_blib_version'\n";
                next;
            }
            $any_to_blib = "$path/any_to_blib";
            last;
        }
    }
    die $error if $error;
    die "Could not find exectable 'any_to_blib' in PATH" if !$any_to_blib;

    our %postamble;
    $postamble{any_to_blib} = <<"EOT";
ANY_TO_BLIB_PROGRAM = $any_to_blib
ANY_TO_BLIB = $any_to_blib --min_version $min_any_to_blib_version
EOT
}
MY_ANY_TO_BLIB
    ;
                }
                $my_section .= << 'EOT'

undef &postamble;	## no critic (ProhibitUselessNoCritic ProhibitAmpersandSigils)
EOT
    ;
		my $post_section = << 'EOT'
    sub postamble {
	return shift->SUPER::postamble() . join("\n", @postamble{sort {uc $a cmp uc $b || $a cmp $b } keys %postamble});
    }
EOT
    ;
                $file_props->{content} =~ s{^[^\S\n]*\#\s*START\s+MY\s*\n(.*?)^\s*\#\s*END\s+MY[^\S\n]*\n}{# START MY
# autogenerated by $Script
BEGIN {
    package MY;

    use vars qw(%postamble);
$my_section}
{
    package MY;
$post_section}
# END MY\n}sm;
                $file_props->{content} =~ s{^[^\S\n]*\#\s*START\s+ANY_TO_BLIB\s*\n(.*?)^\s*\#\s*END\s+ANY_TO_BLIB[^\S\n]*\n}{# START ANY_TO_BLIB
# autogenerated by $Script
$my_any_to_blib# END ANY_TO_BLIB\n}sm;
            }

            if (!$file_props->{binary}) {
                $file_props->{content} =~ s/^(\s*(?:(?:my|our|BEGIN\s*\{)\s*)?\$VERSION\s*=\s*)($quot)[0-9._]+\2(\s*[;\}])/$1$2$file_props->{version}$2$3/mg;
                $file_props->{content} =~ s/\$Version:\s*[0-9.]+\s*\$/\$Version: $file_props->{version} \$/g;
	    }

            # Did we change ?
            my $content_chksum = chksum($file_props);
            if ($file_props->{content_chksum} ne $content_chksum) {
                $file_props->{content_chksum} = $content_chksum;
                warn "Updated $file\n";
            }
            my $force_package_version =
                $file =~ /\.pm\z/ &&
                $file_props->{content} =~ /\bXSLoader\b|\bDynaLoader\b/ &&
                $file_props->{version} ne $release_props->{release};
            if (!$file_props->{old_chksum} ||
                $file_props->{old_chksum} ne $file_props->{content_chksum} ||
                $force_package_version) {
                $release_props->{any_changes} = $changes = 1 if
                    !$release_props->{any_changes};
                if (!$file_props->{version_changed} || $force_package_version) {
                    $release_props->next_release;
                    $file_props->{version} = $force_package_version ?
                        $release_props->{release} :
                        $release_props->next_version($file_props->{version});
                    $file_props->{version_changed} = 1;
                    $changes++;
                }
            }
            $release_props->{released}{$file}{$file_props->{version}} ||= $release_props->{release} if $release_props->{release_changed};
        }
    } while $changes;
}

sub set_version_file {
    my ($release_props) = @_;
    die "Assertion: No RELEASE\n" if !defined $release_props->{release};

    my ($sec, $min, $hour, $mday, $mon, $year) =
        gmtime($release_props->{time_stamp});
    my $iso_time = sprintf("%4d-%02d-%02d %02d:%02d:%02d",
                           $year+1900, $mon+1, $mday, $hour, $min, $sec);
    my $content = "# Generated on $iso_time UT using $Bin/$Script\n";
    $content .= "BEGIN\n";
    $content .= "SEMANTICS\t$VERSION\n";
    $content .= "DIGITS\t\t$release_props->{digits}\n";
    $content .= "RELEASE\t\t$release_props->{release}\n";
    $content .= "DATE\t\t$iso_time\n";
    $content .= sprintf("VCS_CHECK\t%d\n",
                        $release_props->{vcs_check} ? 1 : 0);

    my $file_props = $release_props->{file_props};
    # Same order as files in MANIFEST
    for my $file (@{$release_props->{files}}) {
        my $file_props = $file_props->{$file} ||
            die "Assertion: No data for $file";
        if ($file_props->{content_chksum} ne $file_props->{disk_chksum}) {
            spew($file, $file_props->{content}, $file_props->{binary});
            warn "Restored $file\n" if $file_props->{old_chksum} && $file_props->{old_chksum} eq $file_props->{content_chksum};
        }
        $content .=
            sprintf("VERSION\t%s %s %s\n", @$file_props{qw(content_chksum version file)});
    }
    my $released = $release_props->{released};
    for my $file (sort keys %$released) {
        my $versions = $released->{$file};
        for my $version (sort { $b <=> $a } keys %$versions) {
            # $content .= sprintf("RELEASED $release_props->{format} $release_props->{format} %s\n", $version, $versions->{$version}, $file);
            $content .= sprintf("RELEASED %s %s %s\n",
                                $version, $versions->{$version}, $file);
        }
    }
    $content .= "END\n";
    my $c1 = $content;
    $c1 =~ s/^[^\n\S]*\#.*\n//mg;
    my $c2 = $release_props->{old_content};
    $c2 =~ s/^[^\n\S]*\#.*\n//mg;
    my $updates = 0;
    if ($c1 ne $c2) {
        if ($release_props->{old_content} eq "") {
            warn "New $sums\n";
        } else {
            warn "Updated $sums\n";
            spew("$sums.old", $release_props->{old_content})
        }
        spew($sums, $content);
        $updates++;
    }
    return $updates;
}

package main;
use constant MAX_DEPTH => 50;

eval {
    if (!defined $start_release) {
        # Walk up until we find a md5-versions file
        for (1..MAX_DEPTH) {
            goto FOUND if -e $sums;
            chdir("..") || die "Could not chdir to ..: $!";
        }
        die "Could not find '$sums' in . or in any higher directory\n";
      FOUND:
    }
    my $release_props = PackageTools::Release->get_versions_file;
    $release_props->get_files;
    $release_props->release;
    $release_props->set_version_file;
};
die "Aborted: $@" if $@;

__END__

=for stopwords cvs makeppd.pl

=head1 NAME

release_pm - Automatically update version information on files and packages

=head1 SYNOPSIS

  release_pm --initial [version] [--digits natural] [--import_version] [--import_revision] [--start_version version] [--vcs_check]
  release_pm [--import_version] [--import_revision] [--start_version version] [--vcs_check]
  release_pm [--vcs_check] --next
  release_pm [-U] [--unsafe] --help
  release_pm --version

=head1 DESCRIPTION

....

Files it does special things for:

=over 4

=item deep MANIFESTs

If a subdirectory contains a F<MANIFEST> file that is mentioned in the top level
F<MANIFEST> its content is replaced by the files in the top level F<MANIFEST>
file that fall within this subdirectory but with the subdirectory name removed.

If for example your top level MANIFEST contains:

  foo
  bar/baz
  baz
  bar/MANIFEST

then after running release_pm the file F<bar/MANIFEST> will contain

  baz
  MANIFEST

=item deep Makefile.PLs

Replacements are the same as for a top level Makefile.PL but no code
to set values in %postamble is generated

=back

=head1 OPTIONS

=over 4

=item X<option_import_revision>--import_revision

Get the initial version of a file from any C<$Revision> tag that's already in
there. Such tags are written by source control programs like L<cvs|cvs(1)>,

=item X<option_import_version>--import_version

Get the initial version of a file from any VERSION value that's already in there

=item X<option_digits>--digits natural

How many digits to use in version numbers. Defaults to 3. This means that by
default the first version of anything is C<1.000>, the next is C<1.001> etc.

=item X<option_initial>--initial [version]

Start a new package. Optionally gives the first version number of the package
(defaults to 1). The version will be expanded to the requested number of
L<digits|"option_digits">.

=item X<option_start_version>--start_version version

Gives the first version number that is assigned to new files. It will be
expanded to the requested number of L<digits|"option_digits">

Defaults to 1.

=item X<option_next>--next

Start a new release. The package version is increased. Releasing a package
typically consists of:

  # Bring all package versions up to date
  release_pm

  # Make the actual release
  make dist
  # possibly make a copy into some source control system
  # put your package on CPAN etc.

  # Prepare for the next development cycle
  release_pm --next

The L<--next|"--next"> option is used just B<after> releasing a new version of
your package and updates the package version for the next release. From this
point on your working directory is in preparation for the next release and as
you edit and add files each run of of C<release_pm> will update the version
numbers of these files until finally you are ready to make the next release.

If it turns out there is a problem with your released version normally you will
make a new release with all the fixes and a new package version number so that
people that got the buggy version can recognize this from the package version
and upgrade. But sometimes you may decide that you want to fix the released
package and make a new distribution instead. You however don't want your working
copy to reuse file version numbers from the fixed release. In that case you can
work like this:

  # Go to the working directory for your released package
  cd released

  # Do all fixes that are needed

  # Bring all package versions up to date
  release_pm

  # Make the actual release
  make dist
  # possibly make a copy into some source control system
  # put your package on CPAN etc.

  # Now go the working directory with the development version
  cd ../development

  # Copy the md5-versions file from the released version
  cp ../released/md5-versions .

  # Due to the copy you are now back in the released package version
  # Switch back to the development package version and notice all changed files
  release_pm --next

=item X<option_vcs_check>--vcs_check, --novcs_check

If this option is true the program will looks for special version control system
directives like C<$HeadURL> or C<$Id> in all files and checks that their values
match with the filename. If not it prints a warning. The warning means that
you probably forgot to activate the directives in your version control system
(or never submitted the files yet).

The given setting is written to the F<md5-versions> file and becomes the default
for further calls.

Initial Default is true, from then on the default comes from the md5-versions
file.

=item X<option_version>--version

Show the the program version.

=item X<option_unsafe>--unsafe, -U

Allows you to run L<--help|"option_help"> even as root. Notice that this implies
you are trusting this program and the perl installation.

=item X<option_help>--help, -h

Show this help.

=back

=head1 SEE ALSO

L<cvs|cvs(1)>,
L<makeppd.pl|makeppd.pl>

=head1 AUTHOR

Ton Hospel, E<lt>release_pm@ton.iguana.beE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2007 by Ton Hospel

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.4 or,
at your option, any later version of Perl 5 you may have available.

=cut
