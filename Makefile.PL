#!/usr/bin/perl -w
# $Id: Makefile.PL 3814 2010-02-23 11:01:27Z hospelt $
use 5.008000;
use strict;
use warnings;
use ExtUtils::MakeMaker;
use FindBin;
use Config qw(%Config);

our $VERSION = '1.002';

# Allows to suppress all program installation with -n (library only)
use Getopt::Std;
our ($opt_n, $opt_y);
getopts("ny") || die "Usage: $0 [-n] [-y]\n";

my @programs_to_install;

if (!$opt_n || $opt_y) {
    print <<EOT

This package comes with a programs that I can try
to install in $Config{installscript}.

   Note that you can avoid this question by passing
   the '-n' or '-y' option to 'Makefile.PL'.

EOT
if !$opt_y;
    push @programs_to_install, "bin/release_pm" if
        $opt_y ||
        prompt("Install release_pm, a simple version manager ?", "y") =~ /^y/i;
    push @programs_to_install, "bin/makeppd.pl" if
        $opt_y ||
        prompt("Install makeppd.pl, a simple ppd generator ?", "y") =~ /^y/i;
    push @programs_to_install, "bin/any_to_blib" if
        $opt_y ||
        prompt("Install any_to_blib, a pm_to_blib replacement ?", "y") =~ /^y/i;
}

my $option_file = "$FindBin::Bin/t/options";
my $new = "$option_file.new.$$";
open(my $fh, ">", $new) || die "Could not open '$new': $!";
printf($fh "KEEP=0\nSTRACE=0\n") ||
    die "Error writing to '$new': $!";
eval {
    close($fh) || die "Could not close '$new': $!";
    rename($new, $option_file) ||
        die "Could not rename '$new' to '$option_file': $!";
};
if ($@) {
    $fh = undef;	# close file if open
    unlink($new) || die "Could not unlink '$new': $! after $@";
    die $@;
}

WriteMakefile
    (NAME		=> 'PackageTools',
     VERSION_FROM	=> 'lib/PackageTools/Package.pm', # finds $VERSION
     PREREQ_PM		=> {
	 "Test::More"		=> "0.01",	# Only for the tests
     },
     ABSTRACT		=> 'Package management tools',
     AUTHOR		=> 'Ton Hospel <PackageTools@ton.iguana.be>',
     PL_FILES		=> {},
     EXE_FILES		=> \@programs_to_install,
     $^O eq "MSWin32" ? (
         PM_FILTER	=> '$(PERL) -p -e1',
     ) : (),
     clean		=> {
         FILES => '$(DISTNAME).ppd ppm cover_db t/options',
     },
     );

# START MY
# autogenerated by release_pm
BEGIN {
package MY;
use vars qw(%postamble);

$postamble{ppm} = <<'EOF';
ppm: $(DISTNAME).ppd
EOF

$postamble{ppd} = <<'EOF';
$(DISTNAME).ppd: all ppd
	makeppd.pl "--perl=$(PERLRUN)" --min_version=1.014 "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --leave=ppm "--objects=$(OBJECT)" $(DISTNAME).ppd $(VERSION)
EOF

$postamble{cover} = <<'EOF';
cover:
	cover -delete
	mkdir cover_db
	-HARNESS_PERL_SWITCHES=-MDevel::Cover make test
	cover
EOF

$postamble{ppm_install} = <<'EOF';
ppm_install: $(DISTNAME).ppd
	ppm install ppm/$(DISTNAME).ppd
EOF

$postamble{ppm_uninstall} = <<'EOF';
ppm_uninstall:
	ppm uninstall $(DISTNAME)
EOF

BEGIN { undef &postamble }
sub postamble {
    return shift->SUPER::postamble() . join("\n", @postamble{sort {uc $a cmp uc $b || $a cmp $b } keys %postamble});
}
}
# END MY

BEGIN {
package MY;
our %postamble;
$postamble{ppd} = <<'EOF';
$(DISTNAME).ppd: all ppd
	$(PERL) bin/makeppd.pl "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --leave=ppm $(DISTNAME).ppd $(VERSION)
EOF
}
